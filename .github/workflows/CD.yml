name: CD

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"

env:
  MONT: "M03"
  PLAT: "P212"
  TEMP: "F22"
  TOPIC: "GD32V Platform"
  LASTV: "v0.0.2"
  JOB_TRANSFER_ARTIFACT: build-artifacts

jobs:
  Lint_Code:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Check out
      uses: actions/checkout@v2
      with:
        submodules: "recursive"

    - name: cppcheck
      uses: Qful/check-action@master
      with:
        github_token: ${{ secrets.OSQ_REPO_TOKEN }}
        enable: all
        inconclusive: disable
        inline_suppression: disable
        force_language: c
        force: enable
        max_ctu_depth: 2
        std: c11
        output_file: ./codecheck.txt
        other_options: --bug-hunting --verbose --std=c11

    - name: report
      uses: Qful/check-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.OSQ_REPO_TOKEN }}
        BRANCH_NAME: 'master'

    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: code_check_report
        path: codecheck.txt

  example:
    strategy:
      fail-fast: true
      matrix:
        example:
          - "eval-blink"
          - "arduino-blink"
          - "longan-nano-blink"
        package: ["pio","qio"]
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install qio
        if: matrix.package == 'qio'
        run: |
          pip install -U https://github.com/OS-Q/${{ env.MONT }}/releases/latest/download/qio.zip
          qio platform install file://.

      - name: Install pio
        if: matrix.package == 'pio'
        run: |
          pip install -U https://github.com/platformio/platformio/archive/develop.zip
          pio platform install file://.

      - name: build examples
        working-directory: examples
        run: |
          pio run -d ${{ matrix.example }}

      # - name: upload package
      #   if: env.UPLOAD_BUILD
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: build_${{ matrix.example }}
      #     path: examples/${{ matrix.example }}/.pio/build


  example_tail:
    needs:
      - example
    if: startsWith(github.ref, 'refs/tags/') && !success()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Generate message
        id: message
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "::set-output name=info::fail_build_example_${GITHUB_REF/refs\/tags\//}"

      - name: notification
        uses: Qful/mqtt-action@master
        with:
          protocol: mqtt
          host: ${{secrets.MQTT_SERVER}}
          port: 1883
          username: ${{secrets.MQTT_USERNAME}}
          password: ${{secrets.MQTT_PASSWORD}}
          topic: ${{github.repository}}/${{github.workflow}}/${GITHUB_REF/refs\/tags\//}
          message: ${{ steps.message.outputs.info }}

      - name: delet tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          git fetch
          git tag -d ${GITHUB_REF/refs\/tags\//}
          git push origin :refs/tags/${GITHUB_REF/refs\/tags\//}

  templete:
    needs:
      - example
    if: success()
    strategy:
      fail-fast: true
      matrix:
        template: ["A","B"]
        package: ["pio","qio"]
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9


      - name: Install qio
        if: matrix.package == 'qio'
        run: |
          pip install -U https://github.com/OS-Q/${{ env.MONT }}/releases/latest/download/qio.zip
          qio platform install file://.

      - name: Install pio
        if: matrix.package == 'pio'
        run: |
          pip install -U https://github.com/platformio/platformio/archive/develop.zip
          pio platform install file://.

      - name: Checkout templete
        uses: actions/checkout@v2
        with:
          repository: OS-Q/${{ env.TEMP }}${{ matrix.template }}
          token: ${{ secrets.OSQ_REPO_TOKEN }}
          path: ${{ matrix.template }}

      - name: Build templete
        if: success()
        working-directory: ${{ matrix.template }}
        run: |
          pio run -d .

  # templete_tail:
  #   needs:
  #     - templete
  #   if: startsWith(github.ref, 'refs/tags/') && failure()
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: notification
  #       uses: Qful/mqtt-action@master
  #       with:
  #         protocol: mqtt
  #         host: ${{secrets.MQTT_SERVER}}
  #         port: 1883
  #         username: ${{secrets.MQTT_USERNAME}}
  #         password: ${{secrets.MQTT_PASSWORD}}
  #         topic: ${{github.repository}}/${{github.workflow}}
  #         message: "build templete fail"


  release:
    # name: release ${{ matrix.artifact.name }}
    needs:
      - templete
    if: success() && needs.templete.result != 'skipped'
    runs-on: ubuntu-latest
    steps:
      # - name: Download artifact
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: ${{ env.JOB_TRANSFER_ARTIFACT }}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 1

      - name: package src
        run: |
          zip -r all.zip boards builder extend misc link.json link.py platform.json platform.py
          zip -r qio.zip boards extend misc link.json link.py
          zip -r pio.zip boards builder misc platform.json platform.py
          mkdir package
          cp *.zip package/

      - name: Get Tag
        id: tag_name
        run: |
          echo ::set-output name=TAG_NAME::${GITHUB_REF#refs/tags/}

      - name: Publish Release [GitHub]
        uses: svenstaro/upload-release-action@2.2.0
        with:
          repo_token: ${{ secrets.OSQ_REPO_TOKEN }}
          release_name: ${{ steps.tag_name.outputs.TAG_NAME }}
          tag: ${{ github.ref }}
          file_glob: true
          body: "${{ env.PLAT }} 发布测试版本"
          file: package/*


  check_release:
    needs:
      - release
    if: success()
    runs-on: ubuntu-latest
    outputs:
      BODY: ${{ steps.check_release.outputs.BODY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # To fetch all history for all branches and tags.

      # - name: Generate Changelog
      #   id: changelog
      #   env:
      #     IS_RELEASE: ${{ startsWith(github.ref, 'refs/tags/') }}
      #   run: |
      #       export LATEST_TAG=$(git describe --abbrev=0)
      #       export GIT_LOG=$(git log --pretty=" - %s [%h]" $LATEST_TAG..HEAD | sed 's/ *$//g')
      #       if [ "$IS_RELEASE" = true ]; then
      #         export BODY=$(echo -e "$GIT_LOG")
      #       else
      #         export LATEST_TAG_WITH_LINK=$(echo "[$LATEST_TAG](https://github.com/arduino/arduino-ide/releases/tag/$LATEST_TAG)")
      #         if [ -z "$GIT_LOG" ]; then
      #             export BODY="There were no changes since version $LATEST_TAG_WITH_LINK."
      #         else
      #             export BODY=$(echo -e "Changes since version $LATEST_TAG_WITH_LINK:\n$GIT_LOG")
      #         fi
      #       fi
      #       echo -e "$BODY"
      #       OUTPUT_SAFE_BODY="${BODY//'%'/'%25'}"
      #       OUTPUT_SAFE_BODY="${OUTPUT_SAFE_BODY//$'\n'/'%0A'}"
      #       OUTPUT_SAFE_BODY="${OUTPUT_SAFE_BODY//$'\r'/'%0D'}"
      #       echo "::set-output name=BODY::$OUTPUT_SAFE_BODY"
      #       echo "$BODY" > CHANGELOG.txt

      # - name: Upload Changelog [GitHub Actions]
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ env.JOB_TRANSFER_ARTIFACT }}
      #     path: CHANGELOG.txt

      # - name: Download [GitHub Actions]
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: ${{ env.JOB_TRANSFER_ARTIFACT }}
      #     path: ${{ env.JOB_TRANSFER_ARTIFACT }}

      # - name: Get Tag
      #   id: tag_name
      #   run: |
      #     echo ::set-output name=TAG_NAME::${GITHUB_REF#refs/tags/}

      # - name: Publish Release [GitHub]
      #   uses: svenstaro/upload-release-action@2.2.0
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     release_name: ${{ steps.tag_name.outputs.TAG_NAME }}
      #     file: ${{ env.JOB_TRANSFER_ARTIFACT }}/*
      #     tag: ${{ github.ref }}
      #     file_glob: true
      #     body: ${{ needs.check_release.outputs.BODY }}

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install
        id: getgh
        run: |
          python -m pip install --upgrade pip
          pip install -U https://github.com/OS-Q/${{ env.MONT }}/releases/latest/download/qio.zip
          qio platform install https://github.com/OS-Q/${{ env.PLAT }}/releases/latest/download/all.zip
          qio platform install https://github.com/OS-Q/${{ env.PLAT }}/releases/latest/download/qio.zip
          pip install -U https://github.com/platformio/platformio/archive/develop.zip
          pio platform install https://github.com/OS-Q/${{ env.PLAT }}/releases/latest/download/pio.zip
          echo "::set-output name=status::success"

      # - name: Build
      #   id: build
      #   if: steps.getgh.outputs.status == 'success' && !cancelled()
      #   run: |
      #     qio run -d examples/arduino-blink

  release_tail:
    needs:
      - check_release
    if: startsWith(github.ref, 'refs/tags/') && !success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: notification
        uses: Qful/mqtt-action@master
        with:
          protocol: mqtt
          host: ${{secrets.MQTT_SERVER}}
          port: 1883
          username: ${{secrets.MQTT_USERNAME}}
          password: ${{secrets.MQTT_PASSWORD}}
          topic: ${{github.repository}}/${{github.workflow}}
          message: "check release not success"

      - name: delet tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          git fetch
          git tag -d ${GITHUB_REF/refs\/tags\//}
          git push origin :refs/tags/${GITHUB_REF/refs\/tags\//}

  deploy:
    needs:
      - templete
    if: success()
    runs-on: ubuntu-latest
    steps:
      # - name: Checkout
      #   uses: actions/checkout@v2
      #   with:
      #     submodules: "recursive"
      #     fetch-depth: 1

      # - name: Setup OSS
      #   uses: Qful/ossutil-action@master
      #   with:
      #     endpoint: ${{ secrets.OSS_ENDPOINT }}
      #     access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
      #     access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}

      # - name: upload package
      #   id: OSS
      #   run: |
      #     zip -r ${{ env.PLAT }}.zip boards builder extend misc link.json link.py platform.json platform.py
      #     ossutil cp ${{ env.PLAT }}.zip ${{ secrets.OSS_BUCKET_P }} -f

      - name: notification
        uses: Qful/mqtt-action@master
        with:
          protocol: mqtt
          host: ${{secrets.MQTT_SERVER}}
          port: 1883
          username: ${{secrets.MQTT_USERNAME}}
          password: ${{secrets.MQTT_PASSWORD}}
          topic: ${{github.repository}}/${{github.workflow}}/
          message: "deploy package success"

  check_deploy:
    needs:
      - deploy
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      # - name: Setup OSS
      #   uses: Qful/ossutil-action@master
      #   with:
      #     endpoint: ${{ secrets.OSS_ENDPOINT }}
      #     access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
      #     access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}

      # - name: download package
      #   id: download
      #   run: |
      #     ossutil cp ${{ secrets.OSS_BUCKET_P }}${{ env.PLAT }}.zip .
      #     # ls -a ${{ env.PLAT }}.zip
      #     echo "::set-output name=status::success"

      # - name: Install package
      #   if: steps.download.outputs.status == 'success' && !cancelled()
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -U https://github.com/OS-Q/${{ env.MONT }}/releases/latest/download/qio.zip
      #     qio platform install file://./${{ env.PLAT }}.zip

      - name: notification
        uses: Qful/mqtt-action@master
        with:
          protocol: mqtt
          host: ${{secrets.MQTT_SERVER}}
          port: 1883
          username: ${{secrets.MQTT_USERNAME}}
          password: ${{secrets.MQTT_PASSWORD}}
          topic: ${{github.repository}}/${{github.workflow}}
          message: "deploy package success"

  deploy_tail:
    needs:
      - check_deploy
    if: startsWith(github.ref, 'refs/tags/') && !success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 1

      - name: notification
        uses: Qful/mqtt-action@master
        with:
          protocol: mqtt
          host: ${{secrets.MQTT_SERVER}}
          port: 1883
          username: ${{secrets.MQTT_USERNAME}}
          password: ${{secrets.MQTT_PASSWORD}}
          topic: ${{github.repository}}/${{github.workflow}}
          message: "check deploy fail"

      - name: delet tag
        run: |
          git fetch
          git tag -d ${GITHUB_REF/refs\/tags\//}
          git push origin :refs/tags/${GITHUB_REF/refs\/tags\//}

  package:
    needs:
      - templete
    if: success()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"


      - name: Checkout templete A
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 1
          repository: OS-Q/${{ env.TEMP }}A
          token: ${{ secrets.OSQ_REPO_TOKEN }}
          path: examples/lcd

      - name: delet lcd
        if: success()
        working-directory: examples/lcd
        run: |
          rm -rf .git*
          rm -rf .cir*
          rm -f *.yml

      - name: Checkout templete B
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 1
          repository: OS-Q/${{ env.TEMP }}B
          token: ${{ secrets.OSQ_REPO_TOKEN }}
          path: examples/rvlink

      - name: delet rvlink
        if: success()
        working-directory: examples/rvlink
        run: |
          rm -rf .git*
          rm -rf .cir*
          rm -f *.yml

      - name: Setup Folder
        uses: Qful/ossutil-action@master
        with:
          endpoint: ${{ secrets.OSS_ENDPOINT }}
          access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}

      - name: Upload Package
        id: OSS
        run: |
          zip -r ${{ env.PLAT }}.zip examples boards builder extend misc link.json link.py platform.json platform.py
          ossutil cp ${{ env.PLAT }}.zip ${{ secrets.OSS_BUCKET_P }} -f
          echo "::set-output name=status::success"

      - name: notification
        uses: Qful/mqtt-action@master
        with:
          protocol: mqtt
          host: ${{secrets.MQTT_SERVER}}
          port: 1883
          username: ${{secrets.MQTT_USERNAME}}
          password: ${{secrets.MQTT_PASSWORD}}
          topic: ${{github.repository}}/${{github.workflow}}/${GITHUB_REF/refs\/tags\//}
          message: "package success"

  check_package:
    needs:
      - package
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Setup OSS
        uses: Qful/ossutil-action@master
        with:
          endpoint: ${{ secrets.OSS_ENDPOINT }}
          access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}

      - name: download package
        id: download
        run: |
          echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
          echo -e "${{ env.TOPIC }} ${{ env.PLAT }}" >> ${{ env.PLAT }}.txt
          echo -e "$(date +"%Y.%m.%d") ${GITHUB_REF/refs\/tags\//}" >> ${{ env.PLAT }}.txt
          git log "${{ env.LASTV }}..${{ env.VERSION }}" --stat --pretty=format:"%h - %an, %ar : %s" >> ${{ env.PLAT }}.txt
          ossutil cp ${{ env.PLAT }}.txt ${{ secrets.OSS_MAIL_INFO }} -f
          ossutil cp ${{ secrets.OSS_BUCKET_P }}${{ env.PLAT }}.zip .
          ossutil cp ${{ secrets.OSS_MAIL_INFO }}${{ env.PLAT }}.md .
          echo "::set-output name=status::success"

      - name: Install test
        if: steps.download.outputs.status == 'success' && !cancelled()
        run: |
          python -m pip install --upgrade pip
          pip install -U https://github.com/platformio/platformio/archive/develop.zip
          pio platform install file://./${{ env.PLAT }}.zip
          pip install -U https://github.com/OS-Q/${{ env.MONT }}/releases/latest/download/qio.zip
          qio platform install file://./${{ env.PLAT }}.zip

      - name: Send Mail
        if: success()
        uses: Qful/mail-action@master
        with:
          server_address:  smtp.gmail.com
          server_port: 465
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}
          subject: ${{ env.TOPIC }} ${{ env.PLAT }} released ${{ env.VERSION }}
          to: ${{secrets.MAIL_TO}}
          from: Qitas
          cc: ${{github.event.pusher.email}}
          content_type: text/html
          convert_markdown: true
          attachments: ${{ env.PLAT }}.txt
          body: file://./${{ env.PLAT }}.md

      # - name: delet tag
      #   if: success()
      #   run: |
      #     git tag -d ${GITHUB_REF/refs\/tags\//}
      #     git push origin :refs/tags/${GITHUB_REF/refs\/tags\//}

  package_tail:
    needs:
      - check_package
    if: startsWith(github.ref, 'refs/tags/') && !success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: notification
        uses: Qful/mqtt-action@master
        with:
          protocol: mqtt
          host: ${{secrets.MQTT_SERVER}}
          port: 1883
          username: ${{secrets.MQTT_USERNAME}}
          password: ${{secrets.MQTT_PASSWORD}}
          topic: ${{github.repository}}/${{github.workflow}}
          message: "package check fail"

      # - name: delet tag
      #   run: |
      #     git fetch
      #     git tag -d ${GITHUB_REF/refs\/tags\//}
      #     git push origin :refs/tags/${GITHUB_REF/refs\/tags\//}

  # clean:
  #   # This job must run after all jobs that use the transfer artifact.
  #   needs:
  #     - build
  #     - publish
  #     - release
  #     - artifacts
  #   if: always() && needs.build.result != 'skipped'
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Remove unneeded job transfer artifact
  #       uses: geekyeggo/delete-artifact@v1
  #       with:
  #         name: ${{ env.JOB_TRANSFER_ARTIFACT }}
